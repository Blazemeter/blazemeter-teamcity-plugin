<?xml version="1.0" encoding="UTF-8"?>
<project name="blazemeter" default="all">

    <!--
    TODO
    1. Add compile-test target - IN PROGRESS
    2. Add test target
    3.
    -->
  
  <!--<property file="blazemeter.properties"/>-->
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
    <property name="test-dir" location="common/test" />
    <property name="javac2.home" value="${basedir}/lib-compile"/>
    <property name="lib" value="${basedir}/lib"/>
    <property name="lib-tc" value="${basedir}/lib-tc"/>
    <property name="javac2" value="${javac2.home}/javac2.jar"/>
    <property name="jdom" value="${lib}/jdom.jar"/>
    <property name="httpcore-4.2.1" value="${lib}/httpcore-4.2.1.jar"/>
    <property name="httpclient-4.2.1" value="${lib}/httpclient-4.2.1.jar"/>
    <property name="jackson-core-asl-1.9.10" value="${lib}/jackson-core-asl-1.9.10.jar"/>
    <property name="jackson-mapper-asl-1.9.10" value="${lib}/jackson-mapper-asl-1.9.10.jar"/>
    <property name="hamcrest-core-1.3" value="${lib}/hamcrest-core-1.3.jar"/>
    <property name="junit-4.12" value="${lib}/junit-4.12.jar"/>
    <property name="commons-io-2.4" value="${lib}/commons-io-2.4.jar"/>
    <property name="server-api" value="${lib-tc}/server-api.jar"/>
    <property name="agent-openapi" value="${lib-tc}/agent-openapi.jar"/>
    <property name="common-api" value="${lib-tc}/common-api.jar"/>
    <property name="runtime-util" value="${lib-tc}/runtime-util.jar"/>
    <property name="annotations" value="${lib-tc}/annotations.jar"/>
    <property name="openapi" value="${lib-tc}/openapi.jar"/>
    <property name="spring" value="${lib-tc}/spring.jar"/>
    <property name="agent-api" value="${lib}/agent-api.jar"/>
    <property name="util" value="${lib-tc}/util.jar"/>
    <property name="spring-webmvc" value="${lib-tc}/spring-webmvc.jar"/>
    <property name="servlet-api-2.5" value="${lib-tc}/servlet-api-2.5.jar"/>
    <property name="app-wrapper" value="${lib}/app-wrapper.jar"/>
    <property name="asm" value="${javac2.home}/asm.jar"/>
    <property name="asm-commons" value="${javac2.home}/asm-commons.jar"/>
    <property name="commons-io-2.4" value="${lib}/commons-io-2.4.jar"/>

  <path id="javac2.classpath">
    <pathelement location="${javac2}"/>
    <pathelement location="${jdom}"/>
    <pathelement location="${asm}"/>
    <pathelement location="${asm-commons}"/>
    <pathelement location="${httpclient-4.2.1}"/>
    <pathelement location="${httpcore-4.2.1}"/>
    <pathelement location="${jackson-core-asl-1.9.10}"/>
    <pathelement location="${jackson-mapper-asl-1.9.10}"/>
    <pathelement location="${server-api}"/>
    <pathelement location="${agent-openapi}"/>
    <pathelement location="${app-wrapper}"/>
    <pathelement location="${commons-io-2.4}"/>
  	</path>


	<path id="lib.classpath">
        <pathelement location="${app-wrapper}"/>
        <pathelement location="${jdom}"/>
        <pathelement location="${server-api}"/>
        <pathelement location="${httpclient-4.2.1}"/>
        <pathelement location="${httpcore-4.2.1}"/>
        <pathelement location="${jackson-core-asl-1.9.10}"/>
        <pathelement location="${jackson-mapper-asl-1.9.10}"/>
        <pathelement location="${junit-4.12}"/>
        <pathelement location="${hamcrest-core-1.3}"/>
        <pathelement location="${agent-openapi}"/>
        <pathelement location="${commons-io-2.4}"/>
    </path>
  <taskdef name="javac2" classname="com.intellij.ant.Javac2" classpathref="javac2.classpath" classpath="lib.classpath"/>
  <taskdef name="instrumentIdeaExtensions" classname="com.intellij.ant.InstrumentIdeaExtensions"  classpathref="javac2.classpath"/>
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="128m"/>
  <patternset id="ignored.files">
    <exclude name="**/CVS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/.sbas/**"/>
    <exclude name="**/.IJI.*/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
    <exclude name="**/.pyc/**"/>
    <exclude name="**/.pyo/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/.hg/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.zip"/>
    <include name="*.war"/>
    <include name="*.egg"/>
    <include name="*.ear"/>
    <include name="*.swc"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
    <include name="**/?*.htm"/>
    <include name="**/?*.jsp"/>
    <include name="**/?*.js"/>
  </patternset>
  
  
  <!-- Project Libraries -->
  
  <path id="library.teamcity_open_api_agent.classpath">
    <pathelement location="${agent-api}"/>
  </path>
  
  <path id="library.teamcity_open_api_common.classpath">
    <pathelement location="${common-api}"/>
    <pathelement location="${runtime-util}"/>
  </path>
  
  <path id="library.teamcity_open_api_server.classpath">
    <pathelement location="${server-api}"/>
  </path>
  
  <path id="library.teamcity_third-party_common.classpath">
    <pathelement location="${annotations}"/>
    <pathelement location="${openapi}"/>
    <pathelement location="${spring}"/>
    <pathelement location="${util}"/>
  </path>
  
  <path id="library.teamcity_third-party_server.classpath">
    <pathelement location="${spring-webmvc}"/>
  </path>
  
  <path id="library.tomcat.classpath">
  	<pathelement location="${jdom}"/>
  	<pathelement location="${servlet-api-2.5}"/>
  </path>
  
  
  <!-- Application Server Libraries -->
  
  <!-- Modules -->
  
  
  <!-- Module BlazeMeter-common -->
  
  <dirname property="module.blazemeter-common.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.blazemeter-common" value="${compiler.args}"/>
  
  <property name="blazemeter-common.output.dir" value="${module.blazemeter-common.basedir}/out/production/BlazeMeter-common"/>
  <property name="blazemeter-common.testoutput.dir" value="${module.blazemeter-common.basedir}/out/test/BlazeMeter-common"/>
  
  <path id="blazemeter-common.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="blazemeter-common.module.classpath">
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
  	<path refid="lib.classpath"/>
  </path>
  
  <path id="blazemeter-common.runtime.module.classpath">
    <pathelement location="${blazemeter-common.output.dir}"/>
    <pathelement location="${blazemeter-common.testoutput.dir}"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.blazemeter-common">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.blazemeter-common">
    <patternset refid="excluded.from.module.blazemeter-common"/>
  </patternset>
  
  <path id="blazemeter-common.module.sourcepath">
    <dirset dir="${module.blazemeter-common.basedir}/common">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.blazemeter-common" depends="compile.module.blazemeter-common.production,compile.module.blazemeter-common.tests" description="Compile module BlazeMeter-common"/>
  
  <target name="compile.module.blazemeter-common.production" description="Compile module BlazeMeter-common; production classes">
    <mkdir dir="${blazemeter-common.output.dir}"/>
    <javac2 destdir="${blazemeter-common.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.blazemeter-common}"/>
      <bootclasspath refid="blazemeter-common.module.bootclasspath"/>
      <classpath refid="blazemeter-common.module.classpath"/>
      <src refid="blazemeter-common.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.blazemeter-common"/>
    </javac2>
    
    <copy todir="${blazemeter-common.output.dir}">
      <fileset dir="${module.blazemeter-common.basedir}/common/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.blazemeter-common.tests" depends="compile.module.blazemeter-common.production" description="compile module BlazeMeter-common; test classes" unless="skip.tests"/>
  
  <target name="clean.module.blazemeter-common" description="cleanup module">
    <delete dir="${blazemeter-common.output.dir}"/>
    <delete dir="${blazemeter-common.testoutput.dir}"/>
    <delete dir="${module.blazemeter-common.basedir}/out/" />
  </target>
  
  
  <!-- Module BlazeMeter-agent -->
  
  <dirname property="module.blazemeter-agent.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.blazemeter-agent" value="${compiler.args}"/>
  
  <property name="blazemeter-agent.output.dir" value="${module.blazemeter-agent.basedir}/out/production/BlazeMeter-agent"/>
  <property name="blazemeter-agent.testoutput.dir" value="${module.blazemeter-agent.basedir}/out/test/BlazeMeter-agent"/>
  
  <path id="blazemeter-agent.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="blazemeter-agent.module.classpath">
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <pathelement location="${blazemeter-common.output.dir}"/>
    <pathelement location="${blazemeter-common.testoutput.dir}"/>
  </path>
  
  <path id="blazemeter-agent.runtime.module.classpath">
    <pathelement location="${blazemeter-agent.output.dir}"/>
    <pathelement location="${blazemeter-agent.testoutput.dir}"/>
    <path refid="library.teamcity_open_api_agent.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="blazemeter-common.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.blazemeter-agent">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.blazemeter-agent">
    <patternset refid="excluded.from.module.blazemeter-agent"/>
  </patternset>
  
  <path id="blazemeter-agent.module.sourcepath">
    <dirset dir="${module.blazemeter-agent.basedir}/agent">
      <include name="src"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.blazemeter-agent" depends="compile.module.blazemeter-agent.production,compile.module.blazemeter-agent.tests" description="Compile module BlazeMeter-agent"/>
  
  <target name="compile.module.blazemeter-agent.production" depends="compile.module.blazemeter-common" description="Compile module BlazeMeter-agent; production classes">
    <mkdir dir="${blazemeter-agent.output.dir}"/>
    <javac2 destdir="${blazemeter-agent.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.blazemeter-agent}"/>
      <bootclasspath refid="blazemeter-agent.module.bootclasspath"/>
      <classpath refid="blazemeter-agent.module.classpath"/>
      <src refid="blazemeter-agent.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.blazemeter-agent"/>
    </javac2>
    
    <copy todir="${blazemeter-agent.output.dir}">
      <fileset dir="${module.blazemeter-agent.basedir}/agent/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.blazemeter-agent.tests" depends="compile.module.blazemeter-agent.production" description="compile module BlazeMeter-agent; test classes" unless="skip.tests"/>
  
  <target name="clean.module.blazemeter-agent" description="cleanup module">
    <delete dir="${blazemeter-agent.output.dir}"/>
    <delete dir="${blazemeter-agent.testoutput.dir}"/>
  </target>
  
  
  <!-- Module BlazeMeter-server -->
  
  <dirname property="module.blazemeter-server.basedir" file="${ant.file}"/>
  
  
  
  <property name="compiler.args.blazemeter-server" value="${compiler.args}"/>
  
  <property name="blazemeter-server.output.dir" value="${module.blazemeter-server.basedir}/out/production/BlazeMeter-server"/>
  <property name="blazemeter-server.testoutput.dir" value="${module.blazemeter-server.basedir}/out/test/BlazeMeter-server"/>
  
  <path id="blazemeter-server.module.bootclasspath">
    <!-- Paths to be included in compilation bootclasspath -->
  </path>
  
  <path id="blazemeter-server.module.classpath">
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="library.teamcity_third-party_server.classpath"/>
    <pathelement location="${blazemeter-common.output.dir}"/>
    <pathelement location="${blazemeter-common.testoutput.dir}"/>
  </path>
  
  <path id="blazemeter-server.runtime.module.classpath">
    <pathelement location="${blazemeter-server.output.dir}"/>
    <pathelement location="${blazemeter-server.testoutput.dir}"/>
    <path refid="library.tomcat.classpath"/>
    <path refid="library.teamcity_open_api_server.classpath"/>
    <path refid="library.teamcity_open_api_common.classpath"/>
    <path refid="library.teamcity_third-party_common.classpath"/>
    <path refid="library.teamcity_third-party_server.classpath"/>
    <path refid="blazemeter-common.runtime.module.classpath"/>
  </path>
  
  
  <patternset id="excluded.from.module.blazemeter-server">
    <patternset refid="ignored.files"/>
  </patternset>
  
  <patternset id="excluded.from.compilation.blazemeter-server">
    <patternset refid="excluded.from.module.blazemeter-server"/>
  </patternset>
  
  <path id="blazemeter-server.module.sourcepath">
    <dirset dir="${module.blazemeter-server.basedir}/server">
      <include name="src"/>
      <include name="resources"/>
    </dirset>
  </path>
  
  
  <target name="compile.module.blazemeter-server" depends="compile.module.blazemeter-server.production,compile.module.blazemeter-server.tests" description="Compile module BlazeMeter-server"/>
  
  <target name="compile.module.blazemeter-server.production" depends="compile.module.blazemeter-common" description="Compile module BlazeMeter-server; production classes">
    <mkdir dir="${blazemeter-server.output.dir}"/>
    <javac2 destdir="${blazemeter-server.output.dir}" debug="${compiler.debug}" nowarn="${compiler.generate.no.warnings}" memorymaximumsize="${compiler.max.memory}" fork="true">
      <compilerarg line="${compiler.args.blazemeter-server}"/>
      <bootclasspath refid="blazemeter-server.module.bootclasspath"/>
      <classpath refid="blazemeter-server.module.classpath"/>
      <src refid="blazemeter-server.module.sourcepath"/>
      <patternset refid="excluded.from.compilation.blazemeter-server"/>
    </javac2>
    
    <copy todir="${blazemeter-server.output.dir}">
      <fileset dir="${module.blazemeter-server.basedir}/server/src">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
      <fileset dir="${module.blazemeter-server.basedir}/server/resources">
        <patternset refid="compiler.resources"/>
        <type type="file"/>
      </fileset>
    </copy>
  </target>
  
  <target name="compile.module.blazemeter-server.tests" depends="compile.module.blazemeter-server.production" description="compile module BlazeMeter-server; test classes" unless="skip.tests"/>
  
  <target name="clean.module.blazemeter-server" description="cleanup module">
    <delete dir="${blazemeter-server.output.dir}"/>
    <delete dir="${blazemeter-server.testoutput.dir}"/>
  </target>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.blazemeter-common, clean.module.blazemeter-agent, clean.module.blazemeter-server" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.blazemeter-common, compile.module.blazemeter-agent, compile.module.blazemeter-server" description="build all modules"/>
  
  <target name="all" depends="build.modules" description="build all"/>
</project>